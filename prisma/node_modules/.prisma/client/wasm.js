
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleChangeLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  oldRole: 'oldRole',
  newRole: 'newRole',
  changedBy: 'changedBy',
  changedAt: 'changedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  message: 'message',
  type: 'type',
  meta: 'meta',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.AssetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  serialNumber: 'serialNumber',
  purchaseDate: 'purchaseDate',
  purchasePrice: 'purchasePrice',
  currentValue: 'currentValue',
  status: 'status',
  location: 'location',
  department: 'department',
  category: 'category',
  type: 'type',
  supplier: 'supplier',
  warrantyExpiry: 'warrantyExpiry',
  lastMaintenance: 'lastMaintenance',
  nextMaintenance: 'nextMaintenance',
  depreciableCost: 'depreciableCost',
  salvageValue: 'salvageValue',
  usefulLifeMonths: 'usefulLifeMonths',
  depreciationMethod: 'depreciationMethod',
  depreciationStartDate: 'depreciationStartDate',
  lastAuditDate: 'lastAuditDate',
  nextAuditDate: 'nextAuditDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransferScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  reason: 'reason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fromDepartment: 'fromDepartment',
  requesterId: 'requesterId',
  toDepartment: 'toDepartment',
  status: 'status',
  managerReason: 'managerReason',
  managerId: 'managerId'
};

exports.Prisma.MaintenanceScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  description: 'description',
  cost: 'cost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  scheduledDate: 'scheduledDate',
  priority: 'priority',
  requesterId: 'requesterId',
  managerId: 'managerId',
  status: 'status',
  notes: 'notes',
  maintenanceType: 'maintenanceType',
  scheduleId: 'scheduleId',
  templateId: 'templateId',
  assignedToId: 'assignedToId',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  checklistItems: 'checklistItems',
  issueType: 'issueType',
  urgencyLevel: 'urgencyLevel',
  reportedBy: 'reportedBy',
  assetDowntime: 'assetDowntime',
  impactDescription: 'impactDescription',
  photoUrls: 'photoUrls',
  workPerformed: 'workPerformed',
  partsUsed: 'partsUsed',
  laborHours: 'laborHours',
  partsCost: 'partsCost',
  laborCost: 'laborCost',
  totalCost: 'totalCost',
  workStartedAt: 'workStartedAt',
  workCompletedAt: 'workCompletedAt',
  technicianNotes: 'technicianNotes',
  managerReviewNotes: 'managerReviewNotes',
  finalApprovedAt: 'finalApprovedAt',
  finalApprovedBy: 'finalApprovedBy',
  workPhotos: 'workPhotos'
};

exports.Prisma.DisposalScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  reason: 'reason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  actualValue: 'actualValue',
  expectedValue: 'expectedValue',
  requesterId: 'requesterId',
  method: 'method',
  status: 'status'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  type: 'type',
  url: 'url',
  fileName: 'fileName',
  fileSize: 'fileSize',
  filePath: 'filePath',
  mimeType: 'mimeType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  meta: 'meta'
};

exports.Prisma.DepreciationScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  amount: 'amount',
  date: 'date',
  createdAt: 'createdAt',
  depreciationRate: 'depreciationRate',
  description: 'description',
  method: 'method',
  salvageValue: 'salvageValue',
  updatedAt: 'updatedAt',
  usefulLife: 'usefulLife'
};

exports.Prisma.AssetDepreciationScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  amount: 'amount',
  date: 'date',
  method: 'method',
  usefulLife: 'usefulLife',
  salvageValue: 'salvageValue',
  depreciationRate: 'depreciationRate',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetHistoryScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  field: 'field',
  oldValue: 'oldValue',
  newValue: 'newValue',
  changedAt: 'changedAt',
  changedBy: 'changedBy'
};

exports.Prisma.LinkedAssetScalarFieldEnum = {
  id: 'id',
  fromAssetId: 'fromAssetId',
  toAssetId: 'toAssetId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissionId: 'permissionId',
  granted: 'granted',
  createdAt: 'createdAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  role: 'role',
  permissionId: 'permissionId'
};

exports.Prisma.CapitalImprovementScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  description: 'description',
  improvementDate: 'improvementDate',
  cost: 'cost',
  usefulLifeMonths: 'usefulLifeMonths',
  depreciationMethod: 'depreciationMethod',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceScheduleScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  title: 'title',
  description: 'description',
  frequency: 'frequency',
  customInterval: 'customInterval',
  priority: 'priority',
  estimatedHours: 'estimatedHours',
  status: 'status',
  createdById: 'createdById',
  assignedToId: 'assignedToId',
  templateId: 'templateId',
  startDate: 'startDate',
  endDate: 'endDate',
  lastGenerated: 'lastGenerated',
  nextDue: 'nextDue',
  leadTimeDays: 'leadTimeDays',
  autoAssign: 'autoAssign',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  maintenanceType: 'maintenanceType',
  priority: 'priority',
  estimatedHours: 'estimatedHours',
  instructions: 'instructions',
  checklistItems: 'checklistItems',
  requiredSkills: 'requiredSkills',
  safetyNotes: 'safetyNotes',
  toolsRequired: 'toolsRequired',
  partsRequired: 'partsRequired',
  isActive: 'isActive',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssetAuditScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  auditDate: 'auditDate',
  auditedBy: 'auditedBy',
  auditorId: 'auditorId',
  status: 'status',
  workflowStatus: 'workflowStatus',
  condition: 'condition',
  locationVerified: 'locationVerified',
  actualLocation: 'actualLocation',
  notes: 'notes',
  discrepancies: 'discrepancies',
  recommendations: 'recommendations',
  checklistItems: 'checklistItems',
  discrepancyResolved: 'discrepancyResolved',
  resolvedDate: 'resolvedDate',
  resolvedBy: 'resolvedBy',
  resolutionNotes: 'resolutionNotes',
  photoUrls: 'photoUrls',
  nextAuditDate: 'nextAuditDate',
  assignmentId: 'assignmentId',
  requestId: 'requestId',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  reviewNotes: 'reviewNotes',
  managerApproval: 'managerApproval',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditAssignmentScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  assignedToId: 'assignedToId',
  assignedById: 'assignedById',
  title: 'title',
  description: 'description',
  priority: 'priority',
  dueDate: 'dueDate',
  scheduledDate: 'scheduledDate',
  status: 'status',
  instructions: 'instructions',
  checklistItems: 'checklistItems',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  acceptedAt: 'acceptedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason',
  notificationSent: 'notificationSent',
  remindersSent: 'remindersSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditRequestScalarFieldEnum = {
  id: 'id',
  assetId: 'assetId',
  requesterId: 'requesterId',
  managerId: 'managerId',
  title: 'title',
  reason: 'reason',
  urgency: 'urgency',
  requestedDate: 'requestedDate',
  status: 'status',
  reviewedAt: 'reviewedAt',
  reviewNotes: 'reviewNotes',
  approvedBy: 'approvedBy',
  rejectionReason: 'rejectionReason',
  description: 'description',
  expectedFindings: 'expectedFindings',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  USER: 'USER',
  AUDITOR: 'AUDITOR'
};

exports.DepreciationMethodEnum = exports.$Enums.DepreciationMethodEnum = {
  STRAIGHT_LINE: 'STRAIGHT_LINE',
  DECLINING_BALANCE: 'DECLINING_BALANCE',
  DOUBLE_DECLINING: 'DOUBLE_DECLINING',
  SUM_OF_YEARS_DIGITS: 'SUM_OF_YEARS_DIGITS',
  UNITS_OF_ACTIVITY: 'UNITS_OF_ACTIVITY'
};

exports.TransferStatus = exports.$Enums.TransferStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED'
};

exports.MaintenancePriority = exports.$Enums.MaintenancePriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  WORK_COMPLETED: 'WORK_COMPLETED',
  PENDING_REVIEW: 'PENDING_REVIEW',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.MaintenanceType = exports.$Enums.MaintenanceType = {
  PREVENTIVE: 'PREVENTIVE',
  CORRECTIVE: 'CORRECTIVE',
  INSPECTION: 'INSPECTION'
};

exports.DisposalMethod = exports.$Enums.DisposalMethod = {
  SALE: 'SALE',
  DONATION: 'DONATION',
  RECYCLE: 'RECYCLE',
  SCRAP: 'SCRAP'
};

exports.DisposalStatus = exports.$Enums.DisposalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  INVOICE: 'INVOICE',
  WARRANTY: 'WARRANTY',
  MANUAL: 'MANUAL',
  MAINTENANCE_RECORD: 'MAINTENANCE_RECORD',
  TRANSFER_APPROVAL: 'TRANSFER_APPROVAL',
  TRANSFER_REJECTION: 'TRANSFER_REJECTION',
  MAINTENANCE_APPROVAL: 'MAINTENANCE_APPROVAL',
  MAINTENANCE_REJECTION: 'MAINTENANCE_REJECTION',
  OTHER: 'OTHER'
};

exports.ScheduleFrequency = exports.$Enums.ScheduleFrequency = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  SEMI_ANNUALLY: 'SEMI_ANNUALLY',
  ANNUALLY: 'ANNUALLY',
  CUSTOM: 'CUSTOM'
};

exports.ScheduleStatus = exports.$Enums.ScheduleStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAUSED: 'PAUSED',
  EXPIRED: 'EXPIRED'
};

exports.AuditStatus = exports.$Enums.AuditStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  NEEDS_REVIEW: 'NEEDS_REVIEW'
};

exports.AuditWorkflowStatus = exports.$Enums.AuditWorkflowStatus = {
  DRAFT: 'DRAFT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REQUIRES_REVISION: 'REQUIRES_REVISION'
};

exports.AuditCondition = exports.$Enums.AuditCondition = {
  EXCELLENT: 'EXCELLENT',
  GOOD: 'GOOD',
  FAIR: 'FAIR',
  POOR: 'POOR',
  CRITICAL: 'CRITICAL',
  MISSING: 'MISSING'
};

exports.AuditAssignmentStatus = exports.$Enums.AuditAssignmentStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.AuditRequestStatus = exports.$Enums.AuditRequestStatus = {
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  RoleChangeLog: 'RoleChangeLog',
  User: 'User',
  Notification: 'Notification',
  Asset: 'Asset',
  Transfer: 'Transfer',
  Maintenance: 'Maintenance',
  Disposal: 'Disposal',
  Document: 'Document',
  Depreciation: 'Depreciation',
  AssetDepreciation: 'AssetDepreciation',
  AssetHistory: 'AssetHistory',
  LinkedAsset: 'LinkedAsset',
  Permission: 'Permission',
  UserPermission: 'UserPermission',
  RolePermission: 'RolePermission',
  CapitalImprovement: 'CapitalImprovement',
  MaintenanceSchedule: 'MaintenanceSchedule',
  MaintenanceTemplate: 'MaintenanceTemplate',
  AssetAudit: 'AssetAudit',
  AuditAssignment: 'AuditAssignment',
  AuditRequest: 'AuditRequest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
